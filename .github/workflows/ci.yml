name: ci
on: [push, pull_request]
permissions:
  contents: read
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      COREPACK_ENABLE: 0
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - uses: pnpm/action-setup@v4
        with:
          version: 9.12.3
          run_install: false

      - name: Configure pnpm store
        run: |
          pnpm config set store-dir ~/.pnpm-store
          pnpm -v

      - name: Generate vendor artifacts (if not exists)
        id: check-artifacts
        run: |
          # Check if artifacts exist in current workflow
          if gh run view ${{ github.run_id }} --json artifacts -q '.artifacts[] | select(.name == "pnpm-store")' 2>/dev/null; then
            echo "artifacts_exist=true" >> $GITHUB_OUTPUT
          else
            # Trigger deps-vendor workflow to generate artifacts
            gh workflow run deps-vendor.yml --ref ${{ github.ref }}
            sleep 10
            # Wait for workflow to complete (max 5 minutes)
            for i in {1..30}; do
              if gh run list --workflow=deps-vendor.yml --limit=1 --json status -q '.[0].status' | grep -q completed; then
                break
              fi
              sleep 10
            done
            echo "artifacts_exist=false" >> $GITHUB_OUTPUT
          fi

      - name: Download vendor artifacts
        run: |
          mkdir -p ./vendor-artifacts

          # Try to download from current workflow first
          gh run download ${{ github.run_id }} --name pnpm-store --dir ./vendor-artifacts 2>/dev/null || \
          gh run download $(gh run list --workflow=deps-vendor.yml --limit=1 --json databaseId -q '.[0].databaseId') \
            --name pnpm-store --dir ./vendor-artifacts

          gh run download ${{ github.run_id }} --name ms-playwright --dir ./vendor-artifacts 2>/dev/null || \
          gh run download $(gh run list --workflow=deps-vendor.yml --limit=1 --json databaseId -q '.[0].databaseId') \
            --name ms-playwright --dir ./vendor-artifacts

      - name: Verify offline bootstrap
        run: |
          # Use the enhanced offline script for complete verification
          bash scripts/web-offline.sh ./vendor-artifacts

      - name: Build web (offline verified)
        env:
          PLAYWRIGHT_BROWSERS_PATH: ~/.cache/ms-playwright
          PNPM_OFFLINE: 1
        run: |
          pnpm web:build
          # Verify no network calls in build
          if pnpm web:build 2>&1 | grep -iE "(fetching|downloading|registry\.npm|cdn\.)"; then
            echo "::error::Network calls detected during build!"
            exit 1
          fi

      - name: Test web (unit - offline)
        env:
          PLAYWRIGHT_BROWSERS_PATH: ~/.cache/ms-playwright
        run: pnpm web:test

      - name: Test web (e2e with i18n/RTL verification)
        env:
          PLAYWRIGHT_BROWSERS_PATH: ~/.cache/ms-playwright
          CI: true
        run: |
          pnpm web:e2e
          # Verify i18n/RTL in E2E
          if ! grep -E "(ar|arabic|rtl|العربية)" apps/web/test-results/*.log 2>/dev/null; then
            echo "::warning::i18n/RTL verification not found in E2E logs"
          fi

      - name: Lint
        run: pnpm -w run lint

      - name: Typecheck
        run: pnpm -w run typecheck

      - name: Build
        run: pnpm -w run build

      - name: Tests (unit+pkg)
        run: pnpm run test:ci

      - name: E2E (mocked)
        env:
          GEMINI_API_KEY: ""
          CI_SKIP_REAL_GEMINI: "1"
        run: pnpm -w -r exec vitest --run apps/server/test/e2e/orch-ai-comm.e2e.test.ts

      - name: Upload Playwright artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-results
          path: |
            apps/web/test-results/
            apps/web/playwright-report/
          retention-days: 7

      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: |
            packages/orchestration/coverage
            packages/ai/coverage
            apps/web/coverage

      - name: Generate Lighthouse report
        if: success()
        continue-on-error: true
        run: |
          npx lighthouse http://localhost:3000 \
            --output=json,html \
            --output-path=./lighthouse-report \
            --chrome-flags="--headless" || true

      - name: Upload Lighthouse report
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-report
          path: lighthouse-report.*
          retention-days: 7
